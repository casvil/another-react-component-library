import{j as d}from"./jsx-runtime-D_zvdyIk.js";import{r as l}from"./iframe-DxJVgDAY.js";import{c}from"./clsx-B-dksMZM.js";const r=l.forwardRef(({bordered:n=!1,className:i,format:m="HH:mm:ss",time:e},o)=>{const t=typeof e=="string"||typeof e=="number"?new Date(e):e,a=p=>p.toString().padStart(2,"0"),s=m.replace("HH",a(t.getHours())).replace("mm",a(t.getMinutes())).replace("ss",a(t.getSeconds()));return d.jsx("time",{ref:o,"aria-label":`Time is ${s}`,dateTime:t.toISOString(),className:c("inline-block font-mono",n&&"border border-black-300 rounded-md px-2 py-1",i),children:s})});r.displayName="TimeDisplay";r.__docgenInfo={description:`TimeDisplay atom component.
Renders a time string formatted as HH:mm:ss by default.
Accepts a Date, string, or timestamp as time input.`,methods:[],displayName:"TimeDisplay",props:{time:{required:!0,tsType:{name:"union",raw:"Date | string | number",elements:[{name:"Date"},{name:"string"},{name:"number"}]},description:""},format:{required:!1,tsType:{name:"string"},description:"",defaultValue:{value:"'HH:mm:ss'",computed:!1}},className:{required:!1,tsType:{name:"string"},description:""},bordered:{required:!1,tsType:{name:"boolean"},description:"",defaultValue:{value:"false",computed:!1}}}};export{r as T};
